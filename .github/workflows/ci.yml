name: CI

# Trigger the workflow on push or pull request, but only for the master branch
on:
  pull_request:
  push:
    branches: [master]

jobs:
  build:
    name: Building on ${{ matrix.os }} with ghc-${{ matrix.ghc }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            cabal: "3.0.0.0"
            ghc: "8.8.4"

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-haskell@v1
      name: Setup Haskell
      with:
        ghc-version: ${{ matrix.ghc }}
        cabal-version: ${{ matrix.cabal }}
    - uses: actions/cache@v1
      name: Cache ~/.cabal/store
      with:
        path: ~/.cabal/store
        key: ${{ runner.os }}-${{ matrix.ghc }}-cabal
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends ninja-build libopenblas-dev libhdf5-dev
    - name: Build
      run: |
        cabal v2-update
        cabal v2-build --disable-tests
        # - name: Test
        #   run: |
        #     cabal v2-test --enable-tests --test-show-details=direct

  appimage-x86_64:
    name: Ubuntu AppImage build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-haskell@v1
      name: Setup Haskell
      with:
        ghc-version: "8.8.4"
        cabal-version: "3.0.0.0"
    - uses: actions/cache@v1
      name: Cache ~/.cabal/store
      with:
        path: ~/.cabal/store
        key: ubuntu-latest-8.8.4-cabal
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends ninja-build libopenblas-dev libhdf5-dev
    - name: Create AppImage
      run: |
        cabal v2-update
        ./build_appimage.sh
    - name: Archive artifacts
      uses: actions/upload-artifact@v2
      with:
        name: AppImage x86_64
        path: SpinED*.AppImage*

  upload:
    name: Create release and upload artifacts
    needs: [appimage-x86_64]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
      - name: Inspect directory after downloading artifacts
        run: ls -alFR
        # - name: Create Release
        #   id: create_release
        #   uses: actions/create-release@v1
        #   env:
        #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        #   with:
        #     tag_name: continuous
        #     release_name: Continuous build
        #     draft: false
        #     prerelease: true
        # - name: Upload Release Asset
        #   id: upload-release-asset 
        #   uses: actions/upload-release-asset@v1
        #   env:
        #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        #   with:
        #     upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        #     asset_path: SpinED-x86_64.AppImage
        #     asset_name: SpinED-x86_64.AppImage
        #     asset_content_type: application/octet-stream
      - name: Create release and upload artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
            wget -q https://github.com/TheAssassin/pyuploadtool/releases/download/continuous/pyuploadtool-x86_64.AppImage
            chmod +x pyuploadtool-x86_64.AppImage
            ./pyuploadtool-x86_64.AppImage **/SpinED*.AppImage*
